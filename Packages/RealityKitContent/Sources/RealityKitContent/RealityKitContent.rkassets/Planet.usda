#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    def "Venus" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @Venus.usdz@
    )
    {
        rel material:binding = </Root/Venus/geom/realistic/materials/usdpreviewsurface3sg> (
            bindMaterialAs = "strongerThanDescendants"
        )
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "geom"
        {
            over "realistic"
            {
                over "materials"
                {
                    over "usdpreviewsurface3sg"
                    {
                        string inputs:file2:varname (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (397, 794)
                                    float2 sizeInSubgraph = (153, 53)
                                }
                            }
                        )
                        string inputs:file3:varname (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (610, 794)
                                    float2 sizeInSubgraph = (153, 53)
                                }
                            }
                        )
                        string inputs:file4:varname (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (823.5, 794)
                                    float2 sizeInSubgraph = (153.5, 53)
                                }
                            }
                        )
                        string inputs:file5:varname (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (1036.5, 794)
                                    float2 sizeInSubgraph = (153, 53)
                                }
                            }
                        )
                        token outputs:realitykit:vertex
                        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1342.75, 251)
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                        over "venus_realistic_mat_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (1087, 251)
                            float2 ui:nodegraph:node:size = (210, 199)
                        }

                        over "file5_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (304.5, 608)
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "Lookup_st"
                        {
                            float2 ui:nodegraph:node:pos = (72.5, 332.5)
                            float2 ui:nodegraph:node:size = (145, 127)
                        }

                        over "file5_mtlx_scale"
                        {
                            float2 ui:nodegraph:node:pos = (563.5, 608)
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "file5_mtlx_offset"
                        {
                            float2 ui:nodegraph:node:pos = (822.5, 608)
                            float2 ui:nodegraph:node:size = (61.5, 36.5)
                        }

                        over "file2_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (563.5, 99.5)
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "file3_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (822.5, 430.25)
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }

                        over "file4_mtlx"
                        {
                            float2 ui:nodegraph:node:pos = (304.5, 269)
                            float2 ui:nodegraph:node:size = (148.5, 199)
                        }
                    }
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }
    }

    def "Telescope" (
        active = true
        prepend references = @Telescope.usda@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.16183648, 1.4901161e-8, 0.0070804805)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.097188726, 0.06959388, 0.05105603)
                token shapeType = "Box"
            }
        }

        over "Telescope"
        {
            over "telescope_geo_grp" (
                customData = {
                    float3 rotationEulerHint = (0, -1.5707963, 0)
                }
            )
            {
            }
        }
    }

    def "Neptune" (
        active = true
        prepend references = @Neptune.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.2, 0.2, 0.2)
        float3 xformOp:translate = (0.060392827, -0.0036411285, 0.12612744)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.20000006, 0.2, 0.20000006)
                token shapeType = "Box"
            }
        }
    }

    def "Telescope_1" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, -0.9742388, 0)
        }
        prepend references = @Telescope.usda@
    )
    {
        quatf xformOp:orient = (0.8836849, 0, -0.46808228, 0)
        float3 xformOp:scale = (0.99999994, 1, 0.99999994)
        float3 xformOp:translate = (0.09428799, 0.07717548, 0.11878834)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Telescope"
        {
            over "Materials"
            {
                over "M_telescopeBase"
                {
                    token outputs:displacement.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeBase/M_telescopeBasePreviewSurface.outputs:displacement>
                    token outputs:surface.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeBase/M_telescopeBasePreviewSurface.outputs:surface>

                    over "M_telescopeBasePreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeBase/diffuseColor_texture.outputs:rgb>
                        color3f inputs:emissiveColor.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeBase/emissiveColor_texture.outputs:rgb>
                        float inputs:metallic.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeBase/metallic_texture.outputs:r>
                        normal3f inputs:normal.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeBase/normal_texture.outputs:rgb>
                        float inputs:occlusion.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeBase/occlusion_texture.outputs:r>
                        float inputs:roughness.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeBase/roughness_texture.outputs:r>
                    }

                    over "diffuseColor_texture"
                    {
                        float2 inputs:st.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeBase/texCoordReader.outputs:result>
                    }

                    over "emissiveColor_texture"
                    {
                        float2 inputs:st.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeBase/texCoordReader.outputs:result>
                    }

                    over "metallic_texture"
                    {
                        float2 inputs:st.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeBase/texCoordReader.outputs:result>
                    }

                    over "normal_texture"
                    {
                        float2 inputs:st.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeBase/texCoordReader.outputs:result>
                    }

                    over "occlusion_texture"
                    {
                        float2 inputs:st.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeBase/texCoordReader.outputs:result>
                    }

                    over "roughness_texture"
                    {
                        float2 inputs:st.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeBase/texCoordReader.outputs:result>
                    }
                }

                over "M_telescopeReflectors"
                {
                    token outputs:displacement.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeReflectors/M_telescopeReflectorsPreviewSurface.outputs:displacement>
                    token outputs:surface.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeReflectors/M_telescopeReflectorsPreviewSurface.outputs:surface>

                    over "M_telescopeReflectorsPreviewSurface"
                    {
                        color3f inputs:diffuseColor.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeReflectors/diffuseColor_texture.outputs:rgb>
                        color3f inputs:emissiveColor.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeReflectors/emissiveColor_texture.outputs:rgb>
                        float inputs:metallic.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeReflectors/metallic_texture.outputs:r>
                        normal3f inputs:normal.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeReflectors/normal_texture.outputs:rgb>
                        float inputs:occlusion.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeReflectors/occlusion_texture.outputs:r>
                        float inputs:roughness.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeReflectors/roughness_texture.outputs:r>
                    }

                    over "diffuseColor_texture"
                    {
                        float2 inputs:st.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeReflectors/texCoordReader.outputs:result>
                    }

                    over "emissiveColor_texture"
                    {
                        float2 inputs:st.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeReflectors/texCoordReader.outputs:result>
                    }

                    over "metallic_texture"
                    {
                        float2 inputs:st.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeReflectors/texCoordReader.outputs:result>
                    }

                    over "normal_texture"
                    {
                        float2 inputs:st.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeReflectors/texCoordReader.outputs:result>
                    }

                    over "occlusion_texture"
                    {
                        float2 inputs:st.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeReflectors/texCoordReader.outputs:result>
                    }

                    over "roughness_texture"
                    {
                        float2 inputs:st.connect = </Root/Telescope_1/Telescope/Materials/M_telescopeReflectors/texCoordReader.outputs:result>
                    }
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            bool allowsDirectInput = 1
            bool allowsIndirectInput = 1
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.097188726, 0.06959388, 0.05105603)
                token shapeType = "Box"
            }
        }
    }
}

