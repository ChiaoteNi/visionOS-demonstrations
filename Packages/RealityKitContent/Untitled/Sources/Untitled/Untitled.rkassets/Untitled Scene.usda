#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    def Sphere "Sphere" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Sphere/DefaultMaterial>
        double radius = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.0027159136, 0, -0.008075997)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            matrix4d inputs:lll = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ) (
                customData = {
                    dictionary realitykit = {
                        float2 sizeInSubgraph = (149, 53)
                        int stackingOrderInSubgraph = 0
                    }
                }
            )
            prepend token outputs:mtlx:surface.connect = </Root/Sphere/DefaultMaterial/MaterialXPreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Sphere/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 109.5)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            def Shader "DefaultSurfaceShader" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "MaterialXPreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                token outputs:out
                float2 ui:nodegraph:node:pos = (-255, 105)
                float2 ui:nodegraph:node:size = (207.5, 199)
            }
        }

        def RealityKitComponent "Accessibility"
        {
            uniform token info:id = "RealityKit.Accessibility"
            bool isEnabled = 1
        }

        def RealityKitComponent "Anchoring"
        {
            uniform token info:id = "RealityKit.Anchoring"

            def RealityKitStruct "descriptor"
            {
                token location = "Palm"
                token orientation = "Right"
                token type = "Hand"
            }
        }

        def RealityKitComponent "HierarchicalFade"
        {
            uniform token info:id = "RealityKit.HierarchicalFade"
            float opacity = 0.9
        }

        def RealityKitComponent "GroundingShadow"
        {
            bool enableIBLShadow = 1
            bool enableMeshShadow = 1
            uniform token info:id = "RealityKit.GroundingShadow"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Trigger"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                float height = 0.2
                float radius = 0.1
                token shapeType = "Box"
            }
        }

        def RealityKitComponent "MotionState"
        {
            uniform token info:id = "RealityKit.MotionState"
            float3 m_userSetAngularVelocity = (5, 5, 5)
            uint m_userSetAngularVelocityVersion = 1
            float3 m_userSetLinearVelocity = (5, 5, 5)
            uint m_userSetLinearVelocityVersion = 1
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "CharacterController"
        {
            uniform token info:id = "RealityKit.CharacterController"

            def RealityKitStruct "m_controllerDesc"
            {
                def RealityKitStruct "collisionFilter"
                {
                }
            }
        }
    }

    def Material "Material"
    {
        prepend token outputs:mtlx:surface.connect = </Root/Material/MaterialXPreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (358.25, 99.5)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

        def Shader "MaterialXPreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            token outputs:out
            float2 ui:nodegraph:node:pos = (103.75, 99.5)
            float2 ui:nodegraph:node:size = (207.5, 199)
        }
    }

    def RealityKitComponent "AudioMixGroups"
    {
        uniform token info:id = "RealityKit.AudioMixGroups"

        def RealityKitMixGroup "MixGroup"
        {
            float gain = 0
            bool mute = 0
            float speed = 1
        }
    }
}

